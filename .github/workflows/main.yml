name: Deploy Next.js to EC2

on:
  push:
    branches:
      - main  # Run workflow on push to the main branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'  # Specify the Node.js version used in your Next.js app

      - name: Install dependencies
        run: npm install

      - name: Build Next.js application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: nextjs-build
          path: .next  # Adjust path if using custom output directories

      - name: Deploy to EC2
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
        run: |
         # Configure SSH
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $HOST >> ~/.ssh/known_hosts

          # Transfer files using 'scp' to the EC2 instance's /tmp directory
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -r ./nextjs-app $USER@$HOST:/tmp/

          # Move files from /tmp to the target directory with 'sudo'
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no $USER@$HOST "sudo mkdir -p /var/www/nextjs-app && sudo mv /tmp/nextjs-app/* /var/www/nextjs-app/"

          # Create target directory if it doesn't exist
          ssh -o StrictHostKeyChecking=no $USER@$HOST "sudo mkdir -p /var/www/nextjs-app && sudo chown -R $USER:$USER /var/www/nextjs-app"

          # Copy built files to EC2
          sudo scp -o StrictHostKeyChecking=no -r .next $USER@$HOST:/var/www/nextjs-app

          # SSH into EC2 to start/restart the application
          ssh -o StrictHostKeyChecking=no $USER@$HOST << 'EOF'
            sudo cd /var/www/nextjs-app
            sudo npm install  # Install any server-side dependencies
            sudo pm2 restart app || sudo pm2 start npm --name "app" -- start  # Start or restart with PM2
          EOF

